generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Outfit {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  description    String
  kibbeTypes     String[]
  images         String[]
  occasions      String[]
  aesthetic      String
  seasonalColors String[]
  purchaseLink   String?
  published      Boolean          @default(false)
  owner          User             @relation(fields: [ownerId], references: [uid])
  ownerId        String
  FlaggedContent FlaggedContent[]
  upvotes        Int              @default(0)
  downvotes      Int              @default(0)
  Comment        Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  owner     User     @relation(fields: [ownerId], references: [uid])
  ownerId   String
  outfit    Outfit   @relation(fields: [outfitId], references: [id])
  outfitId  Int
}

model User {
  uid             String           @id @unique @db.VarChar
  email           String           @unique
  firstName       String?
  lastName        String?
  sellerName      String?          @unique
  userImage       String?
  description     String?
  modusType       String?
  outfits         Outfit[]
  customerId      String?
  paymentMethodId String?
  paymentExpYear  Int?
  paymentExpMonth Int?
  paymentLast4    String?
  Blocker         Block[]          @relation(name: "blocker")
  Blocked         Block[]          @relation(name: "blocked")
  FlaggedContent  FlaggedContent[]
  userType        UserType         @default(MEMBER)
  Comment         Comment[]
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blockerId String
  blocker   User     @relation(name: "blocker", fields: [blockerId], references: [uid])
  blockedId String
  blocked   User     @relation(name: "blocked", fields: [blockedId], references: [uid])
}

model FlaggedContent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listingId Int
  outfit    Outfit   @relation(fields: [listingId], references: [id])
  uid       String
  user      User     @relation(fields: [uid], references: [uid])
  reason    String
}

enum UserType {
  EXPERT
  MEMBER
}
